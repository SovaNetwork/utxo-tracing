name: docker

on:
  push:
    branches: ["main"]
    tags:
      - v*
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  DOCKER_USERNAME: ${{ github.actor }}

jobs:
  extract-version:
    runs-on: ubuntu-24.04
    steps:
      - name: Extract version (if main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "VERSION=latest" >> $GITHUB_ENV
          echo "VERSION_SUFFIX=" >> $GITHUB_ENV
      - name: Extract version (if tagged release)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV
          echo "VERSION_SUFFIX=" >> $GITHUB_ENV
    outputs:
      VERSION: ${{ env.VERSION }}
      VERSION_SUFFIX: ${{ env.VERSION_SUFFIX }}

  build:
    name: build and push
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    needs: extract-version
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        include:
          - context: ./indexer
            image_name: network-indexer
          - context: ./storage
            image_name: network-utxos
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - uses: taiki-e/install-action@cross
      - name: Log in to Docker
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io --username ${DOCKER_USERNAME} --password-stdin
      - name: Set IMAGE_PREFIX
        run: echo "IMAGE_PREFIX=ghcr.io/${OWNER,,}" >> "$GITHUB_ENV"
        env:
          OWNER: ${{ github.repository_owner }}
      - name: Set up Docker builder
        run: |
          docker run --privileged --rm tonistiigi/binfmt --install arm64,amd64
          docker buildx create --use --name cross-builder
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_PREFIX }}/${{ matrix.image_name }}:${{ needs.extract-version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/${{ matrix.image_name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
